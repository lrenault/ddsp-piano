import gin.tf.external_configurables
import ddsp
import ddsp_piano

# ======
# Macros
# ======
n_instruments = 1
n_synths = 16

frame_rate = 250
sample_rate = 8000

duration = 3

inference = False


# =====
# Model
# =====
get_model.model = @piano_model.PianoModel()


# ===========
# Sub-modules
# ===========

# Note release
PianoModel.note_release = @sub_modules.NoteRelease()
NoteRelease.frame_rate = 250

# Parallelizer
PianoModel.parallelizer = @sub_modules.Parallelizer()
Parallelizer:
    n_synths = %n_synths
    global_keys = ('conditioning', 'context')

# Inharmonicity and detuning model
PianoModel.inharm_model = @sub_modules.ParametricTuning()

# Context network
PianoModel.context_network = @sub_modules.SimpleContextNet()
SimpleContextNet:
    name = 'context_net'
    layers = [@context_net/layers.Dense(),
              @context_net/layers.GRU(),
              @context_net/nn.Normalize()]
context_net/layers.Dense:
    units = 32
    activation = @tf.nn.leaky_relu
context_net/layers.GRU:
    units = 32
    return_sequences = True

# Monophonic network
PianoModel.monophonic_network = @sub_modules.MonophonicNetwork()
MonophonicNetwork:
    name = 'mono_net'
    layers = [@mono_net/dense1/layers.Dense(),
              @mono_net/layers.GRU(),
              @mono_net/dense2/layers.Dense()]
    output_splits = (('amplitudes', 1),
                     ('harmonic_distribution', 48),
                     ('magnitudes', 32))
mono_net/dense1/layers.Dense:
    units = 128
    activation = @tf.nn.leaky_relu
mono_net/layers.GRU:
    units = 128
    return_sequences = True
mono_net/dense2/layers.Dense:
    units = 128
    activation = @tf.nn.leaky_relu

# Polyphonic processor group
PianoModel.processor_group = @processors.ProcessorGroup()
ProcessorGroup.dag = @polyphonic_dag.polyphonic_dag()
polyphonic_dag.polyphonic_dag:
    n_synths = %n_synths
    additive = @inharm_synth.MultiInharmonic()
    additive_controls = ['amplitudes', 'harmonic_distribution', 'inharm_coef', 'f0_hz']
    noise = @inharm_synth.DynamicSizeFilteredNoise()
    noise_controls = ['magnitudes']
    reverb = @fdn_reverb.FeedbackDelayNetwork()
    reverb_controls = []

inharm_synth.DynamicSizeFilteredNoise:
    name = 'noise'
    frame_rate = %frame_rate
    sample_rate = %sample_rate
    scale_fn = @exp_tanh
inharm_synth.MultiInharmonic:
    name = 'additive'
    frame_rate = %frame_rate
    sample_rate = %sample_rate
    normalize_after_nyquist_cut = False
    scale_fn = @exp_tanh
    inference = %inference
fdn_reverb.FeedbackDelayNetwork:
    trainable = True
    delay_trainable = True
    delay_lines = 8
    sampling_rate = %sample_rate


# ======
# Losses
# ======
PianoModel.losses = [@ddsp_piano.modules.losses.SpectralLoss(),]
ddsp_piano.modules.losses.SpectralLoss:
    loss_type = 'L1'
    mag_weight = 1.0
    logmag_weight = 1.0
    name = 'audio_stft_loss'
